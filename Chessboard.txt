import {
  useToast,
  Button,
  UseToastOptions,
  Text,
  HStack,
  Box,
  Stack,
  useMediaQuery,
  List,
  ListItem,
  Heading,
} from "@chakra-ui/react";
import * as ChessJS from "chess.js";
import Board from "chessboardjsx";
import React, { useState } from "react";

const Chess = typeof ChessJS === "function" ? ChessJS : ChessJS.Chess;

const chess = new Chess();

function Chessboard() {
  const [position, setPosition] = useState<string>();
  const [chessHistory, setChessHistory] = useState<ChessJS.Move[]>([]);
  const toast = useToast();

  const Toast = (
    title: string,
    description: string,
    status: UseToastOptions["status"]
  ) =>
    toast({
      title,
      description,
      status,
      duration: 9000,
      isClosable: true,
    });

  const calculateBestMove = (game) => {
    const newGameMoves = chess.moves();

    return newGameMoves[Math.floor(Math.random() * newGameMoves.length)];
  };

  const onDragStart = (square: ChessJS.Square) => {
    if (
      chess.in_checkmate() === true ||
      chess.in_draw() === true ||
      square.search(/^b/) !== -1
    ) {
      return false;
    }
  };

  const makeBestMove = () => {
    const bestMove = getBestMove(chess);
    chess.move(bestMove);
    setPosition(chess.fen());
    setChessHistory(chess.history({ verbose: true }));
    if (chess.game_over()) {
      Toast("Game over", "The game has ended. You lost.", "info");
    }
  };

  const getBestMove = (game) => {
    if (chess.game_over()) {
      Toast("Game over", "The game has ended. You won!", "success");
    }

    return calculateBestMove(game);
  };

  const onDrop = ({ sourceSquare, targetSquare }) => {
    const move = chess.move({
      from: sourceSquare,
      to: targetSquare,
      promotion: "q",
    });

    removeGreySquares();

    if (move === null) return;

    setChessHistory(chess.history({ verbose: true }));
    setPosition(chess.fen());
    setTimeout(makeBestMove, 250);
  };

  const onMouseOverSquare = (square: ChessJS.Square) => {
    const moves = chess.moves({
      square: square,
      verbose: true,
    });

    if (moves.length === 0) return;

    greySquare(square);

    for (let i = 0; i < moves.length; i++) {
      greySquare(moves[i].to);
    }
  };

  const removeGreySquares = () => {
    document.querySelectorAll("div.grey-square").forEach((e) => {
      if (e.getAttribute("data-testid") === "black-square") {
        // @ts-ignore
        e.style.background = "rgb(181, 136, 99)";
      } else {
        // @ts-ignore
        e.style.background = "rgb(240, 217, 181)";
      }
    });
  };

  const greySquare = (square) => {
    const squareElement = document.querySelector(
      `div[data-squareid=${square}]`
    );
    let background = "#a9a9a9";
    if (squareElement.getAttribute("data-testid") === "black-square") {
      background = "#696969";
    }
    // @ts-ignore
    squareElement.style.background = background;
    squareElement.classList.add("grey-square");
  };

  const height = window.innerHeight - 64;

  const [isLargerThan850] = useMediaQuery("(min-width: 850px)");

  return (
    <>
      <Stack direction={isLargerThan850 ? "row" : "column-reverse"}>
        <Box
          width="100%"
          maxHeight={height}
          overflow="auto"
          pt={isLargerThan850 && "10px"}
          pl={isLargerThan850 && "10px"}
        >
          <Heading>History</Heading>
          <Text fontSize="lg" pb="20 px">
            Watch it populate as you play!
          </Text>
          <List spacing={3} overflow="auto">
            {chessHistory.map((e) => (
              <ListItem key={e.san}>
                {e.color === "w" ? "White" : "Black"} Moved From {e.from}, To{" "}
                {e.to}
                {e.captured && `, Capturing ${e.captured}`}
              </ListItem>
            ))}
          </List>
        </Box>
        <Board
          id="board"
          position={position || "start"}
          onDragOverSquare={onDragStart}
          onDrop={onDrop}
          onMouseOutSquare={removeGreySquares}
          onMouseOverSquare={onMouseOverSquare}
          dropOffBoard="trash"
          width={isLargerThan850 ? height : window.innerWidth}
          draggable
        />
      </Stack>
      <HStack spacing="24px" p="10px" h="100%">
        <Button
          onClick={() => {
            chess.reset();
            setPosition(undefined);
            setChessHistory([]);
          }}
        >
          Reset
        </Button>
        <Button
          onClick={() => {
            if (chess.history({ verbose: true }).slice(-1)[0].color === "b") {
              chess.undo();
              chess.undo();
              setPosition(chess.fen());
              setChessHistory(chess.history({ verbose: true }));
            }
          }}
        >
          Undo
        </Button>
      </HStack>
    </>
  );
}

export default Chessboard;
